#!/usr/bin/env perl

use strict;
use POSIX;
use warnings FATAL => qw(all);
use File::Basename;

if ($#ARGV == -1) {
	print STDERR "usage: $0 <input genes> <ifn> <ofn>\n";
	exit 1;
}

my $map = $ARGV[0];
my $ifn = $ARGV[1];
my $ofn = $ARGV[2];

###############################################################################################
# read gene map
###############################################################################################

my %genes;
print "reading gene file: $map\n";
open(IN, $map) || die $map;
my $header = <IN>;
my %h = parse_header($header);
while (my $line = <IN>) {
    chomp $line;
    my @f = split("\t", $line);
    my $gene = $f[$h{gene}];
    my $cag = $f[$h{set}];
    $genes{$gene} = $cag;
}
close(IN);

###############################################################################################
# go over all cags
###############################################################################################

print "Generating file: $ofn\n";
open(OUT, ">", $ogenes) || die $ofn;

print "reading file: $ifn\n";
open(IN, $ifn) || die $ifn;
$header = <IN>;
%h = parse_header($header);
chomp($header);
print OUT $header, "\tCAG\n";

while (my $line = <IN>) {
    chomp($line);
    my $gene = $f[$h{contig}];
    defined($genes{$gene}) or die;
    my $cag = $genes{$gene};
    print OUT $line, "\t", $cag, "\n";
}
close(IN);
close(OUT);

######################################################################################################
# Subroutines
######################################################################################################


sub parse_header
{
	my ($header) = @_;
	chomp($header);
	my @f = split("\t", $header);
	my %result;
	for (my $i = 0; $i <= $#f; $i++) {
		$result{$f[$i]} = $i;
	}
	return %result;
}
